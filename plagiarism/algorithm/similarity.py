
import pandas as pd
from gensim.models import Word2Vec, Doc2Vec
from gensim.models.doc2vec import TaggedDocument
from nltk.tokenize import word_tokenize
import string
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
import re



df=pd.read_excel(r'C:\Users\Admin\Desktop\npl_project\plagiarism\algorithm\hindids.xlsx')
ptn = string.punctuation 
stopword = ['अंदर', 'अगर', 'अगली', 'अत', 'अतिरिक्त', 'अथवा', 'अन्य', 'अपना', 'अपनी', 'अपने', 'अब', 'अभी', 'अर्थात्', 'अलावा', 'आ', 'आइए', 'आऊं', 'आए', 'आएं', 'आएंगे', 'आएगा', 'आएगी', 'आओ', 'आकर', 'आता', 'आती', 'आते', 'आदि', 'आना', 'आने', 'आप', 'आपका', 'आपकी', 'आपके', 'आपको', 'आपने', 'आपस', 'आपसे', 'आया', 'आयी', 'आये', 'इतना', 'इतनी', 'इत्यादि', 'इधर', 'इन', 'इनका', 'इनकी', 'इनके', 'इनको', 'इनमें', 'इन्हीं', 'इन्हें', 'इन्हों', 'इन्होंने', 'इस', 'इसका', 'इसकी', 'इसके', 'इसने', 'इसमें', 'इसलिए', 'इसल‌िए', 'इससे', 'इसी', 'इसीलिए', 'इसे', 'उठकर', 'उठाई', 'उठाए', 'उठाएगा', 'उठाओ', 'उठायगा', 'उठाया', 'उठे', 'उठेगा', 'उतना', 'उतनी', 'उन', 'उनका', 'उनकी', 'उनके', 'उनको', 'उनमें', 'उनसे', 'उन्हाेंने', 'उन्हीं', 'उन्हें', 'उन्हों', 'उन्होंने', 'उन्‍हें', 'उस', 'उसका', 'उसकी', 'उसके', 'उसको', 'उसने', 'उसमें', 'उससे', 'उसी', 'उसे', 'एक', 'एवं', 'एस', 'ऐसा', 'ऐसी', 'ऐसे', 'ओर', 'और', 'औरों', 'कई', 'कब', 'कबूतर', 'कभी', 'कर', 'करके', 'करता', 'करती', 'करते', 'करना', 'करनी', 'करने', 'करवा', 'करवाएं', 'करवाया', 'करा', 'कराई', 'कराए', 'कराएं', 'कराया', 'करुंगा', 'करे', 'करें', 'करेंगी', 'करेंगे', 'करेगा', 'करेगी', 'करो', 'करोगे', 'कहकर', 'कहता', 'कहती', 'कहते', 'कहना', 'कहने', 'कहा', 'कहिये', 'कही', 'कहीं', 'कहूं', 'कहे', 'कहें', 'कहेंगे', 'कहेगा', 'कहेगी', 'कहो', 'का', 'काटना', 'काटेंगे', 'काफ़ी', 'कि', 'किए', 'कितना', 'कितनी', 'कितने', 'किन्हें', 'किन्हों', 'किया', 'किये', 'किर', 'किस', 'किसके', 'किससे', 'किसी', 'किसे', 'की', 'कीजिए', 'कुछ', 'कुल', 'के', 'केवल', 'कैसा', 'कैसी', 'कैसे', 'को', 'कोई', 'कौन', 'कौनसा', 'कौनसे', 'क्या', 'क्यों', 'क्योंकि', 'क्योंक‌ि', 'क्योकि', 'क‌ितने', 'क‌िस', 'खड़ी', 'खोजा', 'गई', 'गईं', 'गए', 'गया', 'गयी', 'गये', 'गिरी', 'घर', 'घरों', 'घूमता', 'च', 'चलता', 'चलती', 'चलते', 'चलने', 'चला', 'चलाने', 'चलाया', 'चले', 'चलें', 'चलो', 'चाहता', 'चाहती', 'चाहिए', 'चाहेंगे', 'चाह‌िए', 'चुकी', 'छूटने', 'छोड़ते', 'छोड़ें', 'जताया', 'जब', 'जबकि', 'जरिए', 'जहाँ', 'जहां', 'जा', 'जाए', 'जाएं', 'जाएंगी', 'जाएंगे', 'जाएगा', 'जाएगी', 'जाओ', 'जाओ;', 'जाता', 'जाती', 'जाते', 'जानती', 'जानते', 'जानने', 'जाना', 'जाने', 'जानें', 'जानेंगे', 'जान‌िए', 'जितना', 'जितनी', 'जितने', 'जिन', 'जिनका', 'जिनके', 'जिनको', 'जिनमें', 'जिन्हें', 'जिन्हों', 'जिस', 'जिसका', 'जिसकी', 'जिसके', 'जिसने', 'जिसमें', 'जिससे', 'जिसे', 'जीधर', 'जीया', 'जुड़ा', 'जैसा', 'जैसी', 'जैसे', 'जो', 'जोड़कर', 'ज‌िन', 'ज‌िनके', 'ज‌िनसे', 'ज‌िन्हें', 'ज‌िस', 'ज‌िसकी', 'डालना', 'डालने', 'डाले', 'ढूंढने', 'तक', 'तथा', 'तब', 'तभी', 'तरह', 'ताे', 'तिन', 'तिन्हें', 'तिन्हों', 'तिस', 'तिसे', 'तुझसे', 'तुझे', 'तुम', 'तुमने', 'तुमसे', 'तुम्हारा', 'तुम्हारी', 'तुम्हारे', 'तुम्हें', 'तू', 'तेरा', 'तेरी', 'तो', 'था', 'थी', 'थे', 'दबारा', 'दिए', 'दिखता', 'दिखते', 'दिखने', 'दिखाया', 'दिखेगी', 'दिया', 'दिलाएंगे', 'दिलाने', 'दी', 'दीं', 'दीखती', 'दीजिए', 'दुसरा', 'दूसरे', 'दे', 'दें', 'देंगी', 'देंगे', 'देकर', 'देख', 'देखकर', 'देखती', 'देखते', 'देखना', 'देखिए', 'देगा', 'देगी', 'देता', 'देती', 'देते', 'देन', 'देना', 'देनी', 'देने', 'दो', 'दोगे', 'दोनों', 'दौड़ना', 'द्वारा', 'न', 'नहीं', 'नहीें', 'ना', 'निकलता', 'निकली', 'निकले', 'निकाला', 'निहायत', 'नीचे', 'ने', 'पं', 'पंहुचा', 'पंहुचे', 'पकड़ने', 'पकड़ो', 'पकड़ी', 'पड़ता', 'पड़ती', 'पड़ते', 'पड़ना', 'पड़ने', 'पड़ा', 'पड़ी', 'पड़े', 'पड़ेगा', 'पढ़े', 'पर', 'परे', 'पहंचकर', 'पहले', 'पहुँचता','पहुँचाकर', 'पहुंचाएगा', 'पहुंची', 'पहुंचे', 'पहुंचेंगे', 'पहुंचेगा', 'पाई', 'पाएगा', 'पाया', 'पाये', 'पिलाएंगे', 'पीटने', 'पूरा', 'पूरे', 'पे', 'पड़ना', 'पड़ने', 'पड़ी', 'पड़ूंगा', 'पड़े', 'पड़ेगा', 'पड़ेगी', 'फिर', 'फ‌िर', 'बचाती', 'बढ़ाते', 'बता', 'बताइए', 'बताई', 'बताऊंगा', 'बताए', 'बताएंगे', 'बताओ', 'बताता', 'बताना', 'बताने', 'बताया', 'बदला', 'बन', 'बनता', 'बनते', 'बनना', 'बनने', 'बना', 'बनाए', 'बनाएं', 'बनाता', 'बनानी', 'बनाने', 'बनाया', 'बनी', 'बने', 'बनेगा', 'बनोगे', 'बल्कि', 'बही', 'बहुत', 'बाद', 'बारे', 'बाला', 'बालें', 'बिकनी', 'बिठाएं', 'बिना', 'बिलकुल', 'बुलाकर', 'बुलाने', 'बोलकर', 'बोलते', 'बोलने', 'बोले', 'बोलें', 'बोलो', 'बढ़ाया', 'भरना', 'भरभरकर', 'भरो', 'भी', 'भीतर', 'मंगाई', 'मगर', 'मना', 'मांगता', 'मानता', 'मानती', 'मानने', 'माना', 'मानी', 'मानें', 'मानो', 'मे', 'में', 'मेरा', 'मेरे', 'मेरी', 'मेरे‌ि', 'मेरों', 'मैं', 'मैंने', 'मोटा', 'यदि', 'यह', 'यहाँ', 'यहां', 'यहिं', 'यही', 'यहीं', 'या', 'याद', 'यादें', 'यादों', 'यानि', 'ये', 'योग्य', 'रखकर', 'रखता', 'रखती', 'रखते', 'रखना', 'रखने', 'रखा', 'रखें', 'रखो', 'रवाना', 'रहता', 'रहती', 'रहना', 'रहने', 'रहा', 'रहे', 'रहें', 'रहो', 'लग', 'लगता', 'लगती', 'लगना', 'लगने', 'लगा', 'लगाकर', 'लगाता', 'लगाती', 'लगाना', 'लगाया', 'लगी', 'लगे', 'लगेगा', 'लगें', 'लगो', 'लगों', 'लड़का', 'लड़की', 'लड़के', 'लेकर', 'लेकिन', 'लेना', 'लेने', 'लेता', 'लेते', 'वगैरह', 'वगैरह।', 'वर्ग', 'वर्गों', 'वह', 'वहाँ', 'वहां', 'वहिं', 'वही', 'वहीं', 'वाले', 'वुह', 'वे', 'वग़ैरह', 'वग़ैरह।', 'वग़ैरह।।', 'व्यक्ति', 'व्यवस्थित', 'शुरू', 'शेर', 'संग', 'संगी', 'सकता', 'सकते', 'सकती', 'सबसे', 'सभी', 'समय', 'समस्त', 'सम्मुख', 'सभीको', 'सभीसे', 'समेत', 'सभीमें', 'समेत', 'सम्पर्क', 'साथ', 'साथों', 'सारा', 'से', 'सेवा', 'सफ़ाई', 'सफ़ार', 'सो', 'सों', 'सोता', 'सोती', 'सोते', 'सोफे', 'सोहता', 'सोहती', 'सोहते', 'हम', 'हमने', 'हमारा', 'हमारे', 'हमारी', 'हमारे‌ि', 'हमें', 'हमीं', 'हमेशा', 'हमेशार', 'हमेशारे', 'हमेशारी', 'हो', 'होगा', 'होगी', 'होता', 'होती', 'होते', 'होना', 'होने', 'होय', 'है', 'हैं', 'है।', 'होती', 'होते', 'होना', 'होने', 'होय', 'है', 'हैं', 'हैं।']
stop_words = set(stopword)


def preprocess(text):
    tokens = word_tokenize(text)  
    tokens = [word for word in tokens if word not in stop_words]  
    tokens=[word for word in tokens if word not in ptn]
    tokens = [re.sub('।', '', word) for word in tokens]
    return tokens

def prepare_documents(docs):
    tagged_docs = []
    for i, doc in enumerate(docs):
        tagged_docs.append(TaggedDocument(words=doc, tags=[str(i)]))
    return tagged_docs

def train_doc2vec(tagged_docs):
    model = Doc2Vec(tagged_docs, vector_size=50, window=5, min_count=1, workers=8, min_alpha=0.25)
    return model

def calculate_cosine_similarity(model, query):
    query_vec = model.infer_vector(query)
    doc_vectors = [model.docvecs[str(i)] for i in range(len(model.dv))]
    doc_vectors = np.array(doc_vectors)
    query_vec = query_vec.reshape(1, -1)
    sim_scores = cosine_similarity(query_vec, doc_vectors)
    max_sim_score_index = np.argmax(sim_scores)
    max_sim_score = sim_scores[0][max_sim_score_index]
    similarity_percentage = (max_sim_score)*100
    
    return str(max_sim_score_index), similarity_percentage



def similarity(query):
   
    preprocessed_docs = [preprocess(doc) for doc in df['text']]
    
    tagged_docs = prepare_documents(preprocessed_docs)
    
    doc2vec_model = train_doc2vec(tagged_docs)
   
    text = preprocess(query)
  
    max_sim_doc_index, similarity_percentage = calculate_cosine_similarity(doc2vec_model, text)
    percentage="{:.2f}".format(similarity_percentage)
    if similarity_percentage > 70:
        content="The content is likely plagiarized."
    else:
        content="The content is not plagiarized."
    result={
        "similarity": percentage ,
        "content":content
    }
    return result
